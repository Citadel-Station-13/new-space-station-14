using System.Numerics;
using Content.Shared._Citadel.Contracts;
using Content.Shared._Citadel.Contracts.BUI;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Utility;

namespace Content.Client._Citadel.Contracts;

[GenerateTypedNameReferences]
public sealed partial class ContractInfoControl : BoxContainer
{
    public event Action<Guid>? OnStartContract;
    public event Action<Guid>? OnCancelContract;
    public event Action<Guid>? OnJoinContract;
    public event Action<Guid>? OnLeaveContract;
    public event Action<Guid>? OnInitiateContract;
    public event Action<Guid>? OnHailContract;

    private ContractUiState _state = default!;
    private Guid _uuid;

    public ContractInfoControl(ContractUiState state, Guid uuid)
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);
        _uuid = uuid;
        Update(state);
        MainAction.OnPressed += OnMainAction;
        SecondaryAction.OnPressed += OnSecondaryAction;
    }

    private void OnSecondaryAction(BaseButton.ButtonEventArgs obj)
    {
        if (_state.UserStatus == ContractUiState.ContractUserStatus.Owner && _state.Status == ContractStatus.Initiating)
        {
            OnCancelContract?.Invoke(_uuid);
        }
    }

    private void OnMainAction(BaseButton.ButtonEventArgs obj)
    {
        switch (_state.UserStatus)
        {
            case ContractUiState.ContractUserStatus.Owner:
                if (_state.Status == ContractStatus.Initiating)
                {
                    OnStartContract?.Invoke(_uuid);
                }
                else
                {
                    OnCancelContract?.Invoke(_uuid);
                }

                break;
            case ContractUiState.ContractUserStatus.Subcontractor:
                OnLeaveContract?.Invoke(_uuid);
                break;
            case ContractUiState.ContractUserStatus.OpenToJoin:
                OnJoinContract?.Invoke(_uuid);
                break;
            case ContractUiState.ContractUserStatus.OpenToOwn:
                OnInitiateContract?.Invoke(_uuid);
                break;
            default:
                throw new ArgumentOutOfRangeException();
        }

    }

    protected override Vector2 ArrangeOverride(Vector2 finalSize)
    {
        SplitUpper.SplitFraction = 0.3f;
        return base.ArrangeOverride(finalSize);
    }

    public void Update(ContractUiState state)
    {

        _state = state;
        // Set OwnerName
        var ownerName = new FormattedMessage();
        ownerName.PushColor(Color.Gold);
        ownerName.AddText(state.Owner);
        ownerName.Pop();
        OwnerName.SetMessage(ownerName);

        // Set ContractName
        var contractName = new FormattedMessage();
        contractName.PushColor(Color.CadetBlue);
        contractName.AddText(state.Name);
        contractName.Pop();
        ContractName.SetMessage(contractName);

        // Set up subcontractor list.
        SubContractorsList.RemoveAllChildren();
        if (state.Subcontractors.Count == 0)
        {
            var label = new RichTextLabel();
            label.Margin = new Thickness(3, 0);
            SubContractorsList.AddChild(label);
            label.SetMessage(FormattedMessage.FromMarkup("Nobody's here."));
        }

        foreach (var subcon in state.Subcontractors)
        {
            var contractor = new FormattedMessage();
            contractor.PushColor(Color.Gold);
            contractor.AddText("› ");
            contractor.AddText(subcon);
            contractor.Pop();
            var label = new RichTextLabel();
            label.Margin = new Thickness(3, 0);
            SubContractorsList.AddChild(label);
            label.SetMessage(contractor);
        }

        var descMsg = new FormattedMessage();
        descMsg.AddMessage(state.Data.Description);

        foreach (var (group, criteria) in state.Criteria)
        {
            descMsg.PushNewline();
            descMsg.AddMarkup($"[bold][color=gold]{group} criteria[/color][/bold]");
            descMsg.PushNewline();
            foreach (var criterion in criteria)
            {
                descMsg.AddMarkup(" › ");
                descMsg.AddMessage(criterion.Description);
                descMsg.PushNewline();
            }

            if (state.Effects[group].Count == 0)
                continue;

            if (state.Effects[group].Count == 1)
                descMsg.AddMarkup("  [color=gold]Outcome[/color]");
            else
                descMsg.AddMarkup("  [color=gold]Outcomes[/color]");
            descMsg.PushNewline();
            foreach (var effect in state.Effects[group])
            {
                descMsg.AddMarkup("   › ");
                descMsg.AddMessage(effect);
                descMsg.PushNewline();
            }
        }

        var msg = new FormattedMessage();
        switch (state.Status)
        {
            case ContractStatus.Uninitialized:
                msg.AddMarkup("[color=green]Available[/color]");
                break;
            case ContractStatus.Initiating:
                msg.AddMarkup("[color=yellow]Initiating[/color]");
                break;
            case ContractStatus.Active:
                msg.AddMarkup("[color=green]Active[/color]");
                break;
            case ContractStatus.Finalized:
                msg.AddMarkup("[color=magenta]Finalized[/color]");
                break;
            case ContractStatus.Breached:
                msg.AddMarkup("[color=red]Breached[/color]");
                break;
            case ContractStatus.Cancelled:
                msg.AddMarkup("[color=red]Cancelled[/color]");
                break;
            default:
                throw new ArgumentOutOfRangeException();
        }

        ContractState.SetMessage(msg);

        Description.SetMessage(descMsg);

        if (state.Status is ContractStatus.Breached or ContractStatus.Finalized or ContractStatus.Cancelled)
        {
            MainAction.Disabled = true;
            SecondaryAction.Disabled = true;
        }
        else
        {
            MainAction.Disabled = false;
            SecondaryAction.Disabled = false;
        }

        switch (state.UserStatus)
        {
            case ContractUiState.ContractUserStatus.Owner:
                if (state.Status == ContractStatus.Initiating)
                {
                    MainAction.Text = "Start";
                }
                else
                {
                    MainAction.Text = "Cancel";
                }

                break;
            case ContractUiState.ContractUserStatus.Subcontractor:
                MainAction.Text = "Leave";
                break;
            case ContractUiState.ContractUserStatus.OpenToJoin:
                MainAction.Text = "Join";
                break;
            case ContractUiState.ContractUserStatus.OpenToOwn:
                MainAction.Text = "Sign";
                break;
            default:
                throw new ArgumentOutOfRangeException();
        }

        if (state.UserStatus == ContractUiState.ContractUserStatus.Owner && state.Status == ContractStatus.Initiating)
        {
            SecondaryAction.Text = "Cancel";
            SecondaryAction.Disabled = false;
        }
        else
        {
            SecondaryAction.Text = "Hail";
            SecondaryAction.ToolTip = "Hails the owner of the contract in an effort to grab their attention.";
            SecondaryAction.Disabled = true;
        }
    }
}
